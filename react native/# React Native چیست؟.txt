# React Native چیست؟

React Native یک فریمورک متن‌باز برای ساخت اپلیکیشن‌های موبایل است که توسط فیسبوک توسعه یافته. این فریمورک به شما امکان می‌دهد با استفاده از دانش و تجربه‌ای که در React دارید، اپلیکیشن‌های iOS و Android را با یک بیس کد مشترک بنویسید.

---

## تفاوت‌ها و شباهت‌ها با React وب

- کامپوننت‌ها  
  برای وب از عناصر HTML مثل `<div>` و `<span>` استفاده می‌کنید، اما در React Native به‌جای آن‌ها از کامپوننت‌های بومی موبایل مثل `<View>`, `<Text>` و `<Image>` بهره می‌برید.  

- استایل‌دهی  
  به‌جای CSS معمولی، استایل‌ها به‌صورت شیء‌های جاوااسکریپتی و با قوانین مشابه Flexbox تعریف می‌شوند.  

- رندرینگ  
  در وب، خروجی نهایی DOM مرورگر است؛ اما در React Native کامپوننت‌ها به ویجت‌های بومی (Native Widgets) ترجمه می‌شوند تا عملکرد بهتر و تجربه کاربری نزدیک‌تر به اپ‌های نیتیو فراهم شود.  

- دسترسی به APIهای موبایل  
  امکان استفاده از ماژول‌های بومی برای دسترسی به سنسورها، دوربین، موقعیت مکانی و دیگر امکانات سخت‌افزاری موبایل وجود دارد.

---

## معماری کلی

1. JavaScript Thread  
   کدهای شما روی این ترد اجرا می‌شوند و منطق اپ را مدیریت می‌کنند.  

2. Native Bridge  
   یک پل ارتباطی بین JS و بخش‌های نیتیو (Objective-C/Swift برای iOS و Java/Kotlin برای Android) است.  

3. Native Modules & UI Components  
   برای عملیات سنگین یا دسترسی به امکانات خاص، می‌توانید ماژول‌های بومی بنویسید و از آن‌ها در JS فراخوانی کنید.

---

## مزایا و معایب

| مزایا                                         | معایب                                          |
|-----------------------------------------------|-----------------------------------------------|
| یک بیس کد برای iOS و Android                  | نیاز به پیکربندی و دیباگ Bridge در موارد پیشرفته |
| جامعه کاربری بزرگ و پکیج‌های متنوع            | احتمال تفاوت ظاهری جزئی بین پلتفرم‌ها          |
| به‌روزرسانی‌های Hot Reload و Fast Refresh    | عملکرد ممکن است در اپ‌های بسیار پیچیده پایین بیاید |
| یکپارچگی با کتابخانه‌ها و ابزارهای اکوسیستم React | محدودیت در استفاده از برخی APIهای نیتیو         |

---

## مثال ساده

```jsx
import React from 'react';
import { View, Text, StyleSheet, Button } from 'react-native';

export default function App() {
  const [count, setCount] = React.useState(0);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>تعداد کلیک: {count}</Text>
      <Button title="کلیک کن" onPress={() => setCount(count + 1)} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fafafa',
  },
  title: {
    fontSize: 20,
    marginBottom: 16,
  },
});
```

---

## مسیر یادگیری

- نصب و راه‌اندازی  
  - استفاده از Expo برای شروع سریع  
  - یا CLI رسمی React Native برای کنترل بیشتر  

- مفاهیم پایه  
  - کامپوننت‌های کلاس و فانکشنال  
  - Props و State  
  - استایل‌دهی و Flexbox  

- کار با APIهای موبایل  
  - دسترسی به دوربین، موقعیت مکانی و ذخیره‌سازی محلی  
  - مدیریت مجوزها (Permissions)  

- بهینه‌سازی و دیپلوی  
  - ساخت نسخه نهایی برای App Store و Google Play  
  - بهینه‌سازی عملکرد و کاهش حجم اپ

---

برای ادامه مسیر، ممکن است بخواهید درباره Expo، نوشتن ماژول‌های نیتیو سفارشی یا عملکرد اپ‌های بزرگ‌تر بیشتر بدانید. دوست داری اول از کدام بخش شروع کنیم؟


----------------////////////////////////////////---------------------

# مسیر یادگیری React Native

برای حداکثر بهره، مسیر زیر را طی کن تا از مفاهیم پایه تا پیشرفته با یک نقشه راه شفاف آشنا شوی.

---

## ۱. آماده‌سازی محیط توسعه

1. انتخاب ابزار شروع  
   - Expo: راه‌اندازی سریع، بدون نیاز به نصب SDK‌های پیچیده  
   - React Native CLI: کنترل کامل روی پروژه، مناسب پروژه‌های بزرگ  
2. نصب ابزار  
   - Node.js (نسخه LTS)  
   - Git و ادیتور (VS Code با افزونه React Native Tools)  
3. اجرای اولین اپ  
   - با `npx create-expo-app MyApp` یا  
   - با `npx react-native init MyApp`

---

## ۲. مرور مفاهیم پایه React Native

- ساختار پروژه  
  دایرکتوری‌های `components/`, `screens/`, `assets/` و `utils/`  
- کامپوننت‌ها و JSX  
  View, Text, Image, ScrollView، فرقشان با المنت‌های وب  
- استایل‌دهی  
  استفاده از `StyleSheet.create` و قوانین Flexbox  
- Props و State  
  نحوه ارسال داده به کامپوننت و مدیریت وضعیت داخلی  
- Hooks  
  useState, useEffect, useCallback، و کنترل چرخه زندگی کامپوننت

---

## ۳. ناوبری و مسیریابی

1. نصب و پیکربندی  
   - React Navigation یا React Native Navigation  
2. انواع Navigator  
   - Stack, Tab, Drawer  
3. عبور پارامترها بین صفحات  
4. Deep Linking  
   مسیریابی اپ به سمت لینک‌های خارجی

---

## ۴. کار با API‌های موبایل

- دسترسی به دوربین و گالری  
- Location و Geofencing  
- ذخیره‌سازی محلی  
  - AsyncStorage  
  - SQLite یا WatermelonDB  
- مجوزها (Permissions)  
  مدیریت درخواست دسترسی به امکانات دستگاه

---

## ۵. مدیریت وضعیت (State Management)

- Context API  
  برای اپ‌های کوچک تا متوسط  
- Redux / MobX / Zustand  
  برای پروژه‌های بزرگ و تیمی  
- طراحی و ساختار  
  - Ducks pattern  
  - Feature folders

---

## ۶. نوشتن ماژول‌های نیتیو سفارشی

- چرا و چه زمانی؟  
  وقتی API جاوااسکریپت کافی نیست  
- پل‌سازی (Bridging)  
  - Android: Java/Kotlin  
  - iOS: Objective-C/Swift  
- مثال ساده ایجاد یک کامپوننت بومی و فراخوانی در JS

---

## ۷. تست و تضمین کیفیت

- تست واحد با Jest  
- تست کامپوننت با React Native Testing Library  
- تست End-to-End با Detox یا Appium  
- تنظیم CI/CD  
  - GitHub Actions  
  - Bitrise یا CircleCI

---

## ۸. بهینه‌سازی و دیپلوی

- پروفایلینگ و ردیابی عملکرد  
  - React DevTools  
  - Perf Monitor  
- فعال‌سازی موتور Hermes  
- کاهش حجم اپ  
  - حذف پکیج‌‌های بلااستفاده  
  - Code Splitting  
- انتشار  
  - امضای دیجیتال (Keystore و Provisioning Profile)  
  - ارسال به App Store و Google Play

---

## برنامه پیشنهادی زمانی

1. هفته اول: نصب، اولین اپ، مفاهیم پایه  
2. هفته دوم: ناوبری، کار با API موبایل  
3. هفته سوم: مدیریت وضعیت و تست  
4. هفته چهارم: ماژول نیتیو، بهینه‌سازی و دیپلوی

---

## منابع تکمیلی

- مستندات رسمی React Native  
- دوره‌های Udemy و Frontend Masters  
- کانال YouTube: The Net Ninja, React Native School  
- کتاب: “React Native in Action”

---

حالا دوست داری از کدام بخش شروع کنیم؟  
---

**اطلاعات بیشتر که ممکنه بهت کمک کنه:**

- مقایسه Expo و CLI در پروژه‌های تیمی  
- الگوهای طراحی UI موبایل (Atomic Design)  
- استفاده از TypeScript در React Native  
- معماری Clean Code و Domain-Driven Design  
- ابزارهای Debug پیشرفته (Flipper)
