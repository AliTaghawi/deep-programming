# الگوهای طراحی کاربردی در فرانت‌اند (JS, ReactJS, NextJS)

در ادامه فهرستی از مهم‌ترین Design Patterns که هنگام کار با JavaScript، React و Next.js بسیار مفیدند آورده شده است. برای هر الگو، توضیح مختصری دربارهٔ چیستی و مصداق آن در فرانت‌اند آمده است.

---

## ۱. Singleton  
- چیست؟: تضمین می‌کند در سراسر برنامه یک نمونه واحد از یک کلاس یا شیء وجود داشته باشد.  
- مصداق در فرانت‌اند:  
  - یک store سراسری (مانند Redux store یا Context Provider که تنها یک‌بار مقداردهی می‌شوند)  
  - ماژول‌های utility یا config که یک‌بار initialize می‌شوند  

---

## ۲. Factory Method  
- چیست؟: یک متد واسط برای ایجاد اشیاء با نوع یا config دلخواه، بدون نیاز به صدا زدن مستقیم سازنده‌ها.  
- مصداق در فرانت‌اند:  
  - تولید دکمه یا کامپوننت فرم بر اساس نوع (primary, secondary, link)  
  - ساخت سریع آبجکت‌های fetch request با header/timeout متفاوت  

---

## ۳. Observer / Pub-Sub  
- چیست؟: وقتی یک منبع (Subject) تغییر می‌کند، همهٔ مشترکین (Observers) مطلع می‌شوند.  
- مصداق در فرانت‌اند:  
  - رویدادهای CustomEvent در DOM  
  - کتابخانه‌های مدیریت state مثل RxJS, EventEmitter, Zustand یا مکانیزم Subscription در Redux/Context  

---

## ۴. Facade  
- چیست؟: ارائه یک رابط ساده به یک مجموعهٔ پیچیده از کلاس‌ها یا APIها.  
- مصداق در فرانت‌اند:  
  - یک wrapper روی fetch/Axios برای هندل کردن auth token، retry، logging  
  - یک کامپوننت UI که زیرساخت drag-and-drop را مخفی می‌کند و به شما فقط props ساده می‌دهد  

---

## ۵. Decorator  
- چیست؟: افزودن رفتار یا متد جدید به اشیاء/کلاس‌ها به‌صورت پویا و بدون تغییر کلاس اصلی.  
- مصداق در فرانت‌اند:  
  - Higher-Order Components (HOC) در React  
  - اضافه کردن logging یا performance measuring به سرویس‌های API با wrapper functions  

---

## ۶. Composite  
- چیست؟: ترکیب اشیاء در ساختاری درختی و کار یکسان با نود‌های ساده یا مرکب.  
- مصداق در فرانت‌اند:  
  - ساختار component tree در React  
  - کامپوننت‌هایی مثل `<Menu>` که زیرمنوها را به‌صورت یکنواخت مدیریت می‌کند  

---

## ۷. Strategy  
- چیست؟: کپسوله‌سازی مجموعه‌ای از الگوریتم‌ها و امکان انتخاب آن‌ها در زمان اجرا.  
- مصداق در فرانت‌اند:  
  - انتخاب strategy مرتب‌سازی (sort) در جدول داده  
  - شیوه‌ی کش کردن نتایج fetch (stale-while-revalidate vs cache-first)  

---

## ۸. Template Method  
- چیست؟: تعریف اسکلت یک الگوریتم در کلاس پایه و اجازهٔ override مراحل در زیرکلاس‌ها.  
- مصداق در فرانت‌اند:  
  - در React Class Components متدهای lifecycle (مثلاً متد پایهٔ fetch در componentDidMount و مراحل before/after را در زیرکلاس‌ها override)  
  - تعریف یک Base Service با متد `request()` که قبل و بعد از fetch هوک (hook) بخشی را صدا می‌زند  

---

## ۹. State  
- چیست؟: شیء با رفتار متغیر بر اساس وضعیت داخلی، بدون if/elseهای پراکنده.  
- مصداق در فرانت‌اند:  
  - ماشین حالات (Finite State Machine) برای فرم (idle, submitting, success, error) با کتابخانه‌هایی مثل XState  
  - useReducer یا Redux برای مدیریت منظم وضعیت  

---

## ۱۰. Command  
- چیست؟: بسته‌بندی یک درخواست یا عملیات در قالب شیء، با قابلیت undo/redo و queue کردن.  
- مصداق در فرانت‌اند:  
  - معماری undo/redo در ادیتورهای متن (Draft.js, Slate)  
  - صف‌بندی عملیات آفلاین (background sync)  

---

## ۱۱. Iterator  
- چیست؟: ارائه یک رابط یکسان برای پیمایش عناصر مجموعه بدون افشای ساختار داخلی.  
- مصداق در فرانت‌اند:  
  - استفاده از Symbol.iterator در کامپوننت‌هایی که داده‌های پیچیده (مثل درخت کامپوننت‌های Nested) را نمایش می‌دهند  
  - ساخت Custom Hook برای پیمایش paginated APIs به‌صورت درازمدت  

---

## ۱۲. Proxy  
- چیست؟: ایجاد یک واسطه‌ی جاوااسکریپتی (ES6 Proxy) برای گتر/ستر متغیرها یا لاگینگ خودکار.  
- مصداق در فرانت‌اند:  
  - استفاده در MobX برای reactive state  
  - Validation خودکار روی اشیاء Form State  

---

## ۱۳. Memento  
- چیست؟: ذخیره و بازیابی وضعیت شیء بدون آشکارسازی جزئیات داخلی.  
- مصداق در فرانت‌اند:  
  - پیاده‌سازی undo/redo در ویرایشگرهای WYSIWYG  
  - snapshot گرفتن از state و بازگردانی آن در تست‌ها  

---

با تسلط بر این الگوها و درک مصادیق آن‌ها در جاوااسکریپت، React و Next.js، می‌توانی ساختار اپلیکیشن‌ها را قابل‌نگهداری، مقیاس‌پذیر و قابل تست کنی.
