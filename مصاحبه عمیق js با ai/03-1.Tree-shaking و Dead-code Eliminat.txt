# Tree-shaking و Dead-code Elimination چیستند؟

  
Tree-shaking فرایندی است که در آن باندلر با تحلیل ایستا روی واردات و صادرات ماژول‌ها، توابع و متغیرهای استفاده‌نشده را حذف می‌کند.  

  
Dead-code elimination به حذف قطعات کد رسیده‌نشده (unreachable) یا بلااستفاده در جریان نهایی اجرا اشاره دارد.  

  
به کمک این دو تکنیک، حجم نهایی باندل کاهش می‌یابد و زمان بارگذاری بهبود پیدا می‌کند.  

  
باندلرهای مانند Rollup و Webpack از ساختار static import/export بهره می‌برند تا بتوانند دقیقاً تشخیص دهند کدام بخش از کد طعمه‌ٔ Tree-shaking است.  

  
در کنار این‌ها، minifierها مانند Terser با بررسی جریان کنترل و حذف شاخه‌های شرطی همیشه false، به فرآیند dead-code elimination کمک می‌کنند.  

---

# Circular Dependency چیست؟

  
Circular dependency وقتی رخ می‌دهد که دو یا چند ماژول به صورت متقابل همدیگر را وارد (import/require) کنند و یک چرخه تولید شود.  

  
در CommonJS این چرخه منجر به بازگشت partial exports می‌شود، یعنی مصرف‌کننده ممکن است شیء ناتمامی بگیرد.  

  
در ES Modules با تحلیل ایستا و live binding، ارجاعات درون چرخه به‌صورت پویا به‌روزرسانی می‌شوند اما اگر ترتیب بارگذاری رعایت نشود، به `undefined` برخورد خواهید کرد.  

  
Circular dependency خطر افزایش پیچیدگی، مشکلات در تست و خطاهای runtime را بالا می‌برد و بهتر است با refactoring یا استخراج رابط‌های واسط (interface) از آن جلوگیری کنید.
